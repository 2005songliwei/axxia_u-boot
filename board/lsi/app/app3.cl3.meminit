@ -*-Asm-*-
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ app3.meminit
@
@ Memory initialization recipies for the APP3.
@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ APP3 Memory Constants
        @
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

#define CLOCKS_FPGA     0x01fca055
#define CONTROL_FPGA    0x8aa03195
#define SPEC_FPGA_256MB 0x75146aca
#define SPEC_FPGA_512MB 0x75146aca
#define SPEC_FPGA_1GB   0x75146aca
#define SPEC_FPGA_SAFE  SPEC_FPGA_256MB
@#define ODT_FPGA_APP_ENABLE
@#define ODT_FPGA_DDR_ENABLE

#define CONTROL_125MHZ    0x8e002951
#define SPEC_125MHZ_256MB 0x53cf5347
#define SPEC_125MHZ_512MB 0x53cf6b47
#define SPEC_125MHZ_1GB   0x53cf7b47
#define SPEC_125MHZ_SAFE  SPEC_125MHZ_256MB
@#define ODT_125MHZ_APP_ENABLE
@#define ODT_125MHZ_DDR_ENABLE

#define CONTROL_133MHZ    0x89802951
#define SPEC_133MHZ_256MB 0x640f5348
#define SPEC_133MHZ_512MB 0x640f6b48
#define SPEC_133MHZ_1GB   0x640f8348
#define SPEC_133MHZ_SAFE  SPEC_133MHZ_256MB
@#define ODT_133MHZ_APP_ENABLE
@#define ODT_133MHZ_DDR_ENABLE

#define CONTROL_166MHZ    0x8e003191
#define SPEC_166MHZ_256MB 0x7513634a
#define SPEC_166MHZ_512MB 0x75138b4a
#define SPEC_166MHZ_1GB   0x7513ab4a
#define SPEC_166MHZ_SAFE  SPEC_166MHZ_256MB
@#define ODT_166MHZ_APP_ENABLE
@#define ODT_166MHZ_DDR_ENABLE

#define CONTROL_200MHZ    0x8e003191
#define SPEC_200MHZ_256MB 0x86187b4b
#define SPEC_200MHZ_512MB 0x8618ab4b
#define SPEC_200MHZ_1GB   0x8618cb4b
#define SPEC_200MHZ_SAFE  SPEC_200MHZ_256MB
#define ODT_200MHZ_APP_ENABLE
#define ODT_200MHZ_DDR_ENABLE

        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ banks_and_columns
        @
        @ Trashes r2-r6
        @
        @@@@ IN @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@ OUT @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

        .align  5

banks_and_columns:

        @ Base addresses...

#if defined( LSI_ARCH_APP3K )

        ldr     r2,=CONFIG_NORMAL_DDR2_CFG_BASE        
        ldr     r3,=CONFIG_NORMAL_DDR2_0_BASE

#elif defined( LSI_ARCH_APP3 )
        
        mov     r2,#0x50000000
        orr     r2,r2,#0x8000000        @ r2 = 1.0. (3.4) (0x58000000)
        mov     r3,#0x60000000          @ r3 = 0x60000000, base of RAM

#else
#error "Unknown Architecture"
#endif

        @ Set controller to 8 banks.

        mov     r4,#0x55
        str     r4,[r2,#0x8]

        @ When 8 banks are enabled, address bit 6 is bank address 2.
        @ So, with 4 banks, the following would both write to the
        @ same physical address.

        mov     r4,#0xca000000
        orr     r4,r4,#0xfe0000
        orr     r4,r4,#0xc000
        orr     r4,r4,#0xc0             @ Following the humorous example
        str     r4,[r3]                 @ in app350v2_0.5.pdf
        mcr     p15,0,r0,c7,c10,4       @ Drain the write buffer.

        mov     r5,#0x12000000
        orr     r5,r5,#0x340000
        orr     r5,r5,#0x5600
        orr     r5,r5,#0x78
        str     r5,[r3,#0x40]
        mcr     p15,0,r0,c7,c10,4       @ Drain the write buffer.

        ldr     r6,[r3]

        cmp     r4,r6
        beq     1f

        @ Since 0x60000000 contains the second value written,
        @ there are 4 banks.

        mov     r4,#0x1
        str     r4,[r2,#0x8]

1:      @ Now for the column address width.  The controller is
        @ currently set up for a 10 bit column address width.
        @ If the width is really 9, aliasing will be observed
        @ over address bit 12.

        mov     r4,#0xab000000
        orr     r4,r4,#0xcd0000
        orr     r4,r4,#0x1200
        orr     r4,r4,#0x34
        str     r4,[r3]
        mcr     p15,0,r0,c7,c10,4       @ Drain the write buffer.

        mov     r5,#0x10000000
        orr     r5,r5,#0xad0000
        orr     r5,r5,#0xc000
        orr     r5,r5,#0x09
        orr     r6,r3,#0x1000
        str     r5,[r6]
        mcr     p15,0,r0,c7,c10,4       @ Drain the write buffer.

        ldr     r6,[r3]
        cmp     r4,r6
        beq     2f

        @ Since 0x60000000 contains the second value written,
        @ the column address width is 9 bits.

        mov     r4,#0x0
        str     r4,[r2,#0x8]

2:      @ return -- that's all

        mov             pc,lr
        
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ set_termination
        @
        @ Trashes r2-r6
        @
        @@@@ IN @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@ OUT @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ r1 - density
        @
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

        .align  5

set_termination:

set_termination_return:

        mov     pc,lr

        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ ddr_init_fpga
        @
        @ Trashes r0-r6
        @
        @@@@ IN @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@ OUT @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

        .align  5

ddr_init_fpga:

        @ DDRI) @@@@@@@@@@@@@@@@@@@@@@@@@@@
        @ DDRI) Initialization for the FPGA
        mov     r4,#0x50000000          @ r4 = 1.2. (3.0)
        orr     r3,r4,#0x8000000        @ r3 = 1.0. (3.4)
        @ DDRI) 0x5800_0024 = 0x1000_0020
        mov     r5,#0x10000000
        orr     r5,r5,#0x20
        str     r5,[r3,#0x24]
        @ DDRI) 0x5800_0008 = 0x0000_0001
        mov     r5,#0x1
        str     r5,[r3,#0x8]
        @ DDRI) 0x5800_000c = 0x0000_0000
        mov     r5,#0x0
        str     r5,[r3,#0xc]
        @ DDRI) 0x5800_0010 = 0x0004_0000
        mov     r5,#0x00040000
        str     r5,[r3,#0x10]
        @ DDRI) 0x5800_0014=0x0000_2400
        mov     r5,#0x2400
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        @ DDRI) 0x5800_0014=0x0000_8416
        mov     r5,#0x8400
        orr     r5,r5,#0x16
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        @ DDRI) 0x5800_0014=0x0000_0532
        mov     r5,#0x530
        orr     r5,r5,#0x2
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        @ DDRI) 0x5800_0014=0x0000_2400
        mov     r5,#0x2400
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        @ DDRI) 0x5000_0000=0x0000_0000
        mov     r5,#0
        str     r5,[r4]
        @ DDRI) 0x5000_0004=0x0000_0000
        str     r5,[r4,#0x4]
        @ DDRI) 0x5000_0008=0x1000_0000
        str     r5,[r4,#0x8]
        @ DDRI) 0x5000_000c=0x0000_0000
        str     r5,[r4,#0xc]
        @ DDRI) 0x5000_0000=0x0000_0000
        str     r5,[r4]
        @ DDRI) 0x5000_0004=0x0000_0000
        str     r5,[r4,#0x4]
        @ DDRI) 0x5000_0008=0x0000_0000
        str     r5,[r4,#0x8]
        @ DDRI) 0x5000_000c=0x0000_0000
        str     r5,[r4,#0xc]
        @ DDRI) 0x5800_0014=0x0000_0432
        mov     r5,#0x430
        orr     r5,r5,#0x2
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        @ DDRI) 0x5800_0014=0x0000_8796
        mov     r5,#0x8700
        orr     r5,r5,#0x96
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        @ DDRI) 0x5800_0014=0x0000_8416
        mov     r5,#0x8400
        orr     r5,r5,#0x16
        str     r5,[r3,#0x14]
        @ DDRI) read 0x50000000
        ldr     r5,[r4]
        @ DDRI) 0x5800_0000 = CONTROL_FPGA
        ldr     r5,=CONTROL_FPGA
        str     r5,[r3]
        @ DDRI) 0x5800_0004 = SPEC_FPGA_SAFE
        ldr     r5,=SPEC_FPGA_SAFE
        str     r5,[r3,#0x4]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        @ return
        mov     pc,lr

        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ ddr_adj_fpga
        @
        @ Trashes r3-r5
        @
        @ Adjust the specification value based on the RAM density.  Expects
        @ the extended control register to be set.
        @
        @@@@ IN @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@ OUT @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

        .align  5

ddr_adj_fpga:    

        @ Base address of the memory controller
        mov     r3,#0x58000000

        @ Read the extended control register.
        ldr     r4,[r3,#0x8]

        cmp     r4,#0x55
        ldreq   r5,=SPEC_FPGA_1GB
        streq   r5,[r3,#0x4]
        beq     1f

        cmp     r4,#0x01
        ldreq   r5,=SPEC_FPGA_512MB
        streq   r5,[r3,#0x4]
        beq     1f

        cmp     r4,#0x00
        ldreq   r5,=SPEC_FPGA_256MB
        streq   r5,[r3,#0x4]

1:      mov     pc,lr

        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ ddr_init_125
        @
        @ Trashes r0-r6
        @
        @@@@ IN @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@ OUT @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

        .align  5

ddr_init_125:

        @ DDRI) @@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @ DDRI) Initialization for 0-125 MHz
        mov     r4,#0x50000000          @ r4 = 1.2. (3.0)
        orr     r3,r4,#0x8000000        @ r3 = 1.0. (3.4)

        @ 'CKE' bit.  Connected on REV-C boards and beyond.  Enables
        @ memory.  Not connected on earlier boards.
        @ DDRI) 0x5800_0000 = 0x0000_0010
        mov     r5,#0x10
        str     r5,[r3]
        @ DDRI) delay 2 ms
        mov     r0,#2
        mov     r6,lr
        bl      platform_msleep_
        mov     lr,r6

        @ DDRI) 0x5800_0008 = 0x0000_0000
        mov     r5,#0
        str     r5,[r3,#0x8]
        @ DDRI) 0x5800_000c = 0x0000_0000
        str     r5,[r3,#0xc]
        @ DDRI) 0x5800_0010 = 0x0004_0000
        mov     r5,#0x00040000
        str     r5,[r3,#0x10]
        @ DDRI) 0x5800_0014=0x0000_2400
        mov     r5,#0x2400
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        @ DDRI) 0x5800_0014=0x0000_840e
        mov     r5,#0x8400
        orr     r5,r5,#0x0e
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        @ DDRI) 0x5800_0014=0x0000_0332
        mov     r5,#0x330
        orr     r5,r5,#0x2
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        @ DDRI) 0x5800_0014=0x0000_2400
        mov     r5,#0x2400
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]

        @ DDRI) 0x5000_0000=0x0000_0000
        mov     r5,#0
        str     r5,[r4]
        @ DDRI) 0x5000_0004=0x0000_0000
        str     r5,[r4,#0x4]
        @ DDRI) 0x5000_0008=0x0000_0000
        str     r5,[r4,#0x8]
        @ DDRI) 0x5000_000c=0x0000_0000
        str     r5,[r4,#0xc]
        @ DDRI) 0x5000_0000=0x0000_0000
        str     r5,[r4]
        @ DDRI) 0x5000_0004=0x0000_0000
        str     r5,[r4,#0x4]
        @ DDRI) 0x5000_0008=0x0000_0000
        str     r5,[r4,#0x8]
        @ DDRI) 0x5000_000c=0x0000_0000
        str     r5,[r4,#0xc]

        @ DDRI) 0x5800_0014=0x0000_0232
        mov     r5,#0x230
        orr     r5,r5,#0x2
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]

        @ DDRI) 0x5800_0014=0x0000_878e
        mov     r5,#0x8700
        orr     r5,r5,#0x8e
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]

        @ DDRI) 0x5800_0014=0x0000_840e
        mov     r5,#0x8400
        orr     r5,r5,#0xe
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]

        @ Set 'swap-ras' based on version.  1 for pre-v2, 0 thereafter.
        @ DDRI) If release/revision >= 0x3/0x3, clear 'swap-ras'
        @ DDRI) 0x5800_0024 = 0x0000_0000
        @ DDRI) Otherwise, set 'swap-ras'
        @ DDRI) 0x5800_0024 = 0x1000_0000
        version r8,r6
        cmp     r6,#0x63
        bls     1f
        mov     r5,#0
        b       2f
1:      mov     r5,#0x10000000
2:      str     r5,[r3,#0x24]

        @ DDRI) 0x5800_0000 = 0x8e00_2951
        ldr     r5,=CONTROL_125MHZ
        str     r5,[r3]

        @ DDRI) 0x5800_0004 = 0x53cf_5347
        ldr     r5,=SPEC_125MHZ_SAFE
        str     r5,[r3,#0x4]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        
        @ return
        mov     pc,lr

        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ ddr_adj_125
        @
        @ Trashes r3-r5
        @
        @ Adjust the specification value based on the RAM density.  Expects
        @ the extended control register to be set.
        @
        @@@@ IN @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@ OUT @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

        .align  5

ddr_adj_125:    

        @ Base address of the memory controller
        mov     r3,#0x58000000

        @ Read the extended control register.
        ldr     r4,[r3,#0x8]

        cmp     r4,#0x55
        ldreq   r5,=SPEC_125MHZ_1GB
        streq   r5,[r3,#0x4]
        beq     1f

        cmp     r4,#0x01
        ldreq   r5,=SPEC_125MHZ_512MB
        streq   r5,[r3,#0x4]
        beq     1f

        cmp     r4,#0x00
        ldreq   r5,=SPEC_125MHZ_256MB
        streq   r5,[r3,#0x4]

1:      mov     pc,lr
        
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ ddr_init_133
        @
        @ Trashes r0-r6
        @
        @@@@ IN @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@ OUT @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

        .align  5

ddr_init_133:

        @ DDRI) @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @ DDRI) Initialization for 126-133 MHz
        mov     r4,#0x50000000          @ r4 = 1.2. (3.0)
        orr     r3,r4,#0x8000000        @ r3 = 1.0. (3.4)

        @ 'CKE' bit.  Connected on REV-C boards and beyond.  Enables
        @ memory.  Not connected on earlier boards.
        @ DDRI) 0x5800_0000 = 0x0000_0010
        mov     r5,#0x10
        str     r5,[r3]
        @ DDRI) delay 2 ms
        mov     r0,#2
        mov     r6,lr
        bl      platform_msleep_
        mov     lr,r6

        @ DDRI) 0x5800_0008 = 0x0000_0000
        mov     r5,#0
        str     r5,[r3,#0x8]
        @ DDRI) 0x5800_000c = 0x0000_0000
        str     r5,[r3,#0xc]
        @ DDRI) 0x5800_0010 = 0x0004_0000
        mov     r5,#0x00040000
        str     r5,[r3,#0x10]
        @ DDRI) 0x5800_0014=0x0000_2400
        mov     r5,#0x2400
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        @ DDRI) 0x5800_0014=0x0000_840e
        mov     r5,#0x8400
        orr     r5,r5,#0x0e
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        @ DDRI) 0x5800_0014=0x0000_0332
        mov     r5,#0x330
        orr     r5,r5,#0x2
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        @ DDRI) 0x5800_0014=0x0000_2400
        mov     r5,#0x2400
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]

        @ DDRI) 0x5000_0000=0x0000_0000
        mov     r5,#0
        str     r5,[r4]
        @ DDRI) 0x5000_0004=0x0000_0000
        str     r5,[r4,#0x4]
        @ DDRI) 0x5000_0008=0x0000_0000
        str     r5,[r4,#0x8]
        @ DDRI) 0x5000_000c=0x0000_0000
        str     r5,[r4,#0xc]
        @ DDRI) 0x5000_0000=0x0000_0000
        str     r5,[r4]
        @ DDRI) 0x5000_0004=0x0000_0000
        str     r5,[r4,#0x4]
        @ DDRI) 0x5000_0008=0x0000_0000
        str     r5,[r4,#0x8]
        @ DDRI) 0x5000_000c=0x0000_0000
        str     r5,[r4,#0xc]

        @ DDRI) 0x5800_0014=0x0000_0232
        mov     r5,#0x230
        orr     r5,r5,#0x2
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]

        @ DDRI) 0x5800_0014=0x0000_878e
        mov     r5,#0x8700
        orr     r5,r5,#0x8e
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]

        @ DDRI) 0x5800_0014=0x0000_840e
        mov     r5,#0x8400
        orr     r5,r5,#0xe
        str     r5,[r3,#0x14]
        @ DDRI) read 0x50000000
        ldr     r5,[r4]

        @ Set 'swap-ras' based on version.  1 for pre-v2, 0 thereafter.
        @ DDRI) If release/revision >= 0x3/0x3, clear 'swap-ras'
        @ DDRI) 0x5800_0024 = 0x0000_0000
        @ DDRI) Otherwise, set 'swap-ras'
        @ DDRI) 0x5800_0024 = 0x1000_0000
        version r8,r6
        cmp     r6,#0x63
        bls     1f
        mov     r5,#0
        b       2f
1:      mov     r5,#0x10000000
2:      str     r5,[r3,#0x24]

        @ DDRI) 0x5800_0000 = 0x8980_2951
        ldr     r5,=CONTROL_133MHZ
        str     r5,[r3]

        @ DDRI) 0x5800_0004 = 0x640f_5348
        ldr     r5,=SPEC_133MHZ_SAFE
        str     r5,[r3,#0x4]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        
        @ return
        mov     pc,lr

        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ ddr_adj_133
        @
        @ Trashes r3-r5
        @
        @ Adjust the specification value based on the RAM density.  Expects
        @ the extended control register to be set.
        @
        @@@@ IN @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@ OUT @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

        .align  5

ddr_adj_133:    

        @ Base address of the memory controller
        mov     r3,#0x58000000

        @ Read the extended control register.
        ldr     r4,[r3,#0x8]

        cmp     r4,#0x55
        ldreq   r5,=SPEC_133MHZ_1GB
        streq   r5,[r3,#0x4]
        beq     1f

        cmp     r4,#0x01
        ldreq   r5,=SPEC_133MHZ_512MB
        streq   r5,[r3,#0x4]
        beq     1f

        cmp     r4,#0x00
        ldreq   r5,=SPEC_133MHZ_256MB
        streq   r5,[r3,#0x4]

1:      mov     pc,lr
        
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ ddr_init_166
        @
        @ Trashes r0-r6
        @
        @@@@ IN @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@ OUT @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

        .align  5

ddr_init_166:   

        @ DDRI) @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @ DDRI) Initialization for 134-166 MHz
        mov     r4,#0x50000000          @ r4 = 1.2. (3.0)
        orr     r3,r4,#0x8000000        @ r3 = 1.0. (3.4)

        @ 'CKE' bit.  Connected on REV-C boards and beyond.  Enables
        @ memory.  Not connected on earlier boards.
        @ DDRI) 0x5800_0000 = 0x0000_0010
        mov     r5,#0x10
        str     r5,[r3]
        @ DDRI) delay 500 ms
        mov     r0,#2
        mov     r6,lr
        bl      platform_msleep_
        mov     lr,r6

#ifdef ODT_166MHZ_APP_ENABLE
        
        @ Set APP300 Side ODT
        @ DDRI) 0x3e00_001c = 0x0004_0000
        mov     r5,#0x00040000
        mov     r6,#0x3e000000
        str     r5,[r6,#0x1c]

#endif

#ifdef ODT_166MHZ_DDR_ENABLE
        
        @ Set APP300 Memory Controller ODT
        @ DDRI) 0x5800_0024 |= 0xc000_0000
        ldr     r5,[r3,#0x24]
        orr     r5,r5,#0xc0000000
        str     r5,[r3,#0x24]

#endif
        
        @ DDRI) 0x5800_0008 = 0x0000_0000
        mov     r5,#0
        str     r5,[r3,#0x8]
        @ DDRI) 0x5800_000c = 0x0000_0000
        str     r5,[r3,#0xc]
        @ DDRI) 0x5800_0010 = 0x0004_0000
        mov     r5,#0x00040000
        str     r5,[r3,#0x10]
        @ DDRI) 0x5800_0014=0x0000_2400
        mov     r5,#0x2400
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        @ DDRI) 0x5800_0014=0x0000_8410
        mov     r5,#0x8400
        orr     r5,r5,#0x10
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        @ DDRI) 0x5800_0014=0x0000_0532
        mov     r5,#0x530
        orr     r5,r5,#0x2
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        @ DDRI) 0x5800_0014=0x0000_2400
        mov     r5,#0x2400
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        @ DDRI) 0x5000_0000=0x0000_0000
        mov     r5,#0
        str     r5,[r4]

        @ DDRI) 0x5000_0004=0x0000_0000
        str     r5,[r4,#0x4]
        @ DDRI) 0x5000_0008=0x0000_0000
        str     r5,[r4,#0x8]
        @ DDRI) 0x5000_000c=0x0000_0000
        str     r5,[r4,#0xc]
        @ DDRI) 0x5000_0000=0x0000_0000
        str     r5,[r4]
        @ DDRI) 0x5000_0004=0x0000_0000
        str     r5,[r4,#0x4]
        @ DDRI) 0x5000_0008=0x0000_0000
        str     r5,[r4,#0x8]
        @ DDRI) 0x5000_000c=0x0000_0000
        str     r5,[r4,#0xc]

        @ DDRI) 0x5800_0014=0x0000_0432
        mov     r5,#0x430
        orr     r5,r5,#0x2
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]

        @ DDRI) 0x5800_0014=0x0000_8790
        mov     r5,#0x8700
        orr     r5,r5,#0x90
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]

        @ DDRI) 0x5800_0014=0x0000_8410
        mov     r5,#0x8400
        orr     r5,r5,#0x10
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]

        @ Set 'swap-ras' based on version.  1 for pre-v2, 0 thereafter.
        @ DDRI) If release/revision >= 0x3/0x3, clear 'swap-ras'
        @ DDRI) 0x5800_0024 = 0x0000_0000
        @ DDRI) Otherwise, set 'swap-ras'
        @ DDRI) 0x5800_0024 = 0x1000_0000
        version r8,r6
        cmp     r6,#0x63
        bls     1f
        mov     r5,#0
        b       2f
1:      mov     r5,#0x10000000
2:      str     r5,[r3,#0x24]

        @ DDRI) 0x5800_0000 = 0x8e80_3191
        ldr     r5,=CONTROL_166MHZ
        str     r5,[r3]

        @ DDRI) 0x5800_0004 = 0x7513_6b4a
        ldr     r5,=SPEC_166MHZ_SAFE
        str     r5,[r3,#0x4]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        
        @ return
        mov     pc,lr
        
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ ddr_adj_166
        @
        @ Trashes r3-r5
        @
        @ Adjust the specification value based on the RAM density.  Expects
        @ the extended control register to be set.
        @
        @@@@ IN @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@ OUT @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

        .align  5

ddr_adj_166:    

        @ Base address of the memory controller
        mov     r3,#0x58000000

        @ Read the extended control register.
        ldr     r4,[r3,#0x8]

        cmp     r4,#0x55
        ldreq   r5,=SPEC_166MHZ_1GB
        streq   r5,[r3,#0x4]
        beq     1f

        cmp     r4,#0x01
        ldreq   r5,=SPEC_166MHZ_512MB
        streq   r5,[r3,#0x4]
        beq     1f

        cmp     r4,#0x00
        ldreq   r5,=SPEC_166MHZ_256MB
        streq   r5,[r3,#0x4]

1:      mov     pc,lr
        
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ ddr_init_200
        @
        @ Trashes r0-r6
        @
        @@@@ IN @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@ OUT @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

        .align  5
        
ddr_init_200:

        @ DDRI) @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @ DDRI) Initialization for 167-200 MHz
        mov     r4,#0x50000000          @ r4 = 1.2. (3.0)
        orr     r3,r4,#0x8000000        @ r3 = 1.0. (3.4)

        @ 'CKE' bit.  Connected on REV-C boards and beyond.  Enables
        @ memory.  Not connected on earlier boards.
        @ DDRI) 0x5800_0000 = 0x0000_0010
        mov     r5,#0x10
        str     r5,[r3]
        @ DDRI) delay 2 ms
        mov     r0,#2
        mov     r6,lr
        bl      platform_msleep_
        mov     lr,r6

        @ Enable DQS Gating and set 'half cycle' and 'tap select'
        @ DDRI) 0x5800_0020 |= 0x3777_7700 (v1.2 ONLY)
        version r8,r5                           @ For v1.2 ONLY.
        cmp     r5,#0x62
        bne     1f
        mov     r5,#0x17000000
        orr     r5,r5,#0x770000
        orr     r5,r5,#0x7700
        str     r5,[r3,#0x20]

        @ Set the MDAC Values
        @ DDRI) 0x5800_0424 = 0x70 (-16)
        mov     r5,#0x70
        str     r5,[r3,#0x424]
        @ DDRI) 0x5800_0428 = 0x6d (-19)
        mov     r5,#0x6d
        str     r5,[r3,#0x428]
        @ DDRI) 0x5800_042c = 0x6b (-21)
        mov     r5,#0x6b
        str     r5,[r3,#0x42c]
        @ DDRI) 0x5800_0430 = 0x69 (-23)
        mov     r5,#0x69
        str     r5,[r3,#0x430]
        @ DDRI) 0x5800_0434 = 0x69 (-23)
        mov     r5,#0x69
        str     r5,[r3,#0x434]

1:      

#ifdef ODT_200MHZ_APP_ENABLE
        
        @ Set APP300 Side ODT
        @ DDRI) 0x3e00_001c = 0x0004_0000
        mov     r5,#0x00040000
        mov     r6,#0x3e000000
        str     r5,[r6,#0x1c]

#endif

#ifdef ODT_200MHZ_DDR_ENABLE
        
        @ Set APP300 Memory Controller ODT
        @ DDRI) 0x5800_0024 |= 0xc000_0000
        ldr     r5,[r3,#0x24]
        orr     r5,r5,#0xc0000000
        str     r5,[r3,#0x24]

#endif
        
        @ DDRI) 0x5800_0008 = 0x0000_0000
        mov     r5,#0
        str     r5,[r3,#0x8]
        @ DDRI) 0x5800_000c = 0x0000_0000
        str     r5,[r3,#0xc]
        @ DDRI) 0x5800_0010 = 0x0004_0000
        mov     r5,#0x00040000
        str     r5,[r3,#0x10]
        @ DDRI) 0x5800_0014=0x0000_2400
        mov     r5,#0x2400
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        @ DDRI) 0x5800_0014=0x0000_8410
        mov     r5,#0x8400
        orr     r5,r5,#0x10
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        @ DDRI) 0x5800_0014=0x0000_0532
        mov     r5,#0x530
        orr     r5,r5,#0x2
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        @ DDRI) 0x5800_0014=0x0000_2400
        mov     r5,#0x2400
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]

        @ DDRI) 0x5000_0000=0x0000_0000
        mov     r5,#0
        str     r5,[r4]
        @ DDRI) 0x5000_0004=0x0000_0000
        str     r5,[r4,#0x4]
        @ DDRI) 0x5000_0008=0x0000_0000
        str     r5,[r4,#0x8]
        @ DDRI) 0x5000_000c=0x0000_0000
        str     r5,[r4,#0xc]
        @ DDRI) 0x5000_0000=0x0000_0000
        str     r5,[r4]
        @ DDRI) 0x5000_0004=0x0000_0000
        str     r5,[r4,#0x4]
        @ DDRI) 0x5000_0008=0x0000_0000
        str     r5,[r4,#0x8]
        @ DDRI) 0x5000_000c=0x0000_0000
        str     r5,[r4,#0xc]

        @ DDRI) 0x5800_0014=0x0000_0432
        mov     r5,#0x430
        orr     r5,r5,#0x2
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        
        @ DDRI) 0x5800_0014=0x0000_8790
        mov     r5,#0x8700
        orr     r5,r5,#0x90
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]

        @ DDRI) 0x5800_0014=0x0000_8410
        mov     r5,#0x8400
        orr     r5,r5,#0x10
        str     r5,[r3,#0x14]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]

        @ Set 'swap-ras' based on version.  1 for pre-v2, 0 thereafter.
        @ DDRI) If release/revision >= 0x3/0x3, clear 'swap-ras'
        @ DDRI) 0x5800_0024 = 0x0000_0000
        @ DDRI) Otherwise, set 'swap-ras'
        @ DDRI) 0x5800_0024 = 0x1000_0000
        version r8,r6
        cmp     r6,#0x63
        bls     1f
        mov     r5,#0
        b       2f
1:      mov     r5,#0x10000000
2:      str     r5,[r3,#0x24]

        @ DDRI) 0x5800_0000 = CONTROL_200MHZ
        ldr     r5,=CONTROL_200MHZ
        str     r5,[r3]

        @ DDRI) 0x5800_0004 = 0x8618_d34b
        ldr     r5,=SPEC_200MHZ_SAFE
        str     r5,[r3,#0x4]
        @ DDRI) read 0x5000_0000
        ldr     r5,[r4]
        
        @ return
        mov     pc,lr

        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ ddr_adj_200
        @
        @ Trashes r3-r5
        @
        @ Adjust the specification value based on the RAM density.  Expects
        @ the extended control register to be set.
        @
        @@@@ IN @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@ OUT @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        @
        @ nothing
        @
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

        .align  5

ddr_adj_200:    

        @ Base address of the memory controller
        mov     r3,#0x58000000

        @ Read the extended control register.
        ldr     r4,[r3,#0x8]

        cmp     r4,#0x55
        ldreq   r5,=SPEC_200MHZ_1GB
        streq   r5,[r3,#0x4]
        beq     1f

        cmp     r4,#0x01
        ldreq   r5,=SPEC_200MHZ_512MB
        streq   r5,[r3,#0x4]
        beq     1f

        cmp     r4,#0x00
        ldreq   r5,=SPEC_200MHZ_256MB
        streq   r5,[r3,#0x4]

1:      mov     pc,lr
